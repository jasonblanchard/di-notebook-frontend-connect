// @generated by protoc-gen-es v0.0.10 with parameter "target=ts"
// @generated from file notebook/v1/notebook.proto (package notebook.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3, Timestamp} from "@bufbuild/protobuf";

/**
 * @generated from message notebook.v1.Entry
 */
export class Entry extends Message<Entry> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string text = 2;
   */
  text = "";

  /**
   * @generated from field: string creator_id = 3;
   */
  creatorId = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 4;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 5;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp delete_time = 6;
   */
  deleteTime?: Timestamp;

  constructor(data?: PartialMessage<Entry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "notebook.v1.Entry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "creator_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "created_at", kind: "message", T: Timestamp },
    { no: 5, name: "updated_at", kind: "message", T: Timestamp },
    { no: 6, name: "delete_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Entry {
    return new Entry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Entry {
    return new Entry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Entry {
    return new Entry().fromJsonString(jsonString, options);
  }

  static equals(a: Entry | PlainMessage<Entry> | undefined, b: Entry | PlainMessage<Entry> | undefined): boolean {
    return proto3.util.equals(Entry, a, b);
  }
}

/**
 * @generated from message notebook.v1.GetEntryRequest
 */
export class GetEntryRequest extends Message<GetEntryRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetEntryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "notebook.v1.GetEntryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEntryRequest {
    return new GetEntryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEntryRequest {
    return new GetEntryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEntryRequest {
    return new GetEntryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetEntryRequest | PlainMessage<GetEntryRequest> | undefined, b: GetEntryRequest | PlainMessage<GetEntryRequest> | undefined): boolean {
    return proto3.util.equals(GetEntryRequest, a, b);
  }
}

/**
 * @generated from message notebook.v1.GetEntryResponse
 */
export class GetEntryResponse extends Message<GetEntryResponse> {
  /**
   * @generated from field: notebook.v1.Entry entry = 1;
   */
  entry?: Entry;

  constructor(data?: PartialMessage<GetEntryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "notebook.v1.GetEntryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entry", kind: "message", T: Entry },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEntryResponse {
    return new GetEntryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEntryResponse {
    return new GetEntryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEntryResponse {
    return new GetEntryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetEntryResponse | PlainMessage<GetEntryResponse> | undefined, b: GetEntryResponse | PlainMessage<GetEntryResponse> | undefined): boolean {
    return proto3.util.equals(GetEntryResponse, a, b);
  }
}

/**
 * @generated from message notebook.v1.CreateEntryRequest
 */
export class CreateEntryRequest extends Message<CreateEntryRequest> {
  /**
   * @generated from field: string text = 1;
   */
  text = "";

  constructor(data?: PartialMessage<CreateEntryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "notebook.v1.CreateEntryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateEntryRequest {
    return new CreateEntryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateEntryRequest {
    return new CreateEntryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateEntryRequest {
    return new CreateEntryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateEntryRequest | PlainMessage<CreateEntryRequest> | undefined, b: CreateEntryRequest | PlainMessage<CreateEntryRequest> | undefined): boolean {
    return proto3.util.equals(CreateEntryRequest, a, b);
  }
}

/**
 * @generated from message notebook.v1.CreateEntryResponse
 */
export class CreateEntryResponse extends Message<CreateEntryResponse> {
  /**
   * @generated from field: notebook.v1.Entry entry = 1;
   */
  entry?: Entry;

  constructor(data?: PartialMessage<CreateEntryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "notebook.v1.CreateEntryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entry", kind: "message", T: Entry },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateEntryResponse {
    return new CreateEntryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateEntryResponse {
    return new CreateEntryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateEntryResponse {
    return new CreateEntryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateEntryResponse | PlainMessage<CreateEntryResponse> | undefined, b: CreateEntryResponse | PlainMessage<CreateEntryResponse> | undefined): boolean {
    return proto3.util.equals(CreateEntryResponse, a, b);
  }
}

/**
 * @generated from message notebook.v1.UpdateEntryRequest
 */
export class UpdateEntryRequest extends Message<UpdateEntryRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string text = 2;
   */
  text = "";

  constructor(data?: PartialMessage<UpdateEntryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "notebook.v1.UpdateEntryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateEntryRequest {
    return new UpdateEntryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateEntryRequest {
    return new UpdateEntryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateEntryRequest {
    return new UpdateEntryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateEntryRequest | PlainMessage<UpdateEntryRequest> | undefined, b: UpdateEntryRequest | PlainMessage<UpdateEntryRequest> | undefined): boolean {
    return proto3.util.equals(UpdateEntryRequest, a, b);
  }
}

/**
 * @generated from message notebook.v1.UpdateEntryResponse
 */
export class UpdateEntryResponse extends Message<UpdateEntryResponse> {
  /**
   * @generated from field: notebook.v1.Entry entry = 1;
   */
  entry?: Entry;

  constructor(data?: PartialMessage<UpdateEntryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "notebook.v1.UpdateEntryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entry", kind: "message", T: Entry },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateEntryResponse {
    return new UpdateEntryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateEntryResponse {
    return new UpdateEntryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateEntryResponse {
    return new UpdateEntryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateEntryResponse | PlainMessage<UpdateEntryResponse> | undefined, b: UpdateEntryResponse | PlainMessage<UpdateEntryResponse> | undefined): boolean {
    return proto3.util.equals(UpdateEntryResponse, a, b);
  }
}

/**
 * @generated from message notebook.v1.ListEntriesRequest
 */
export class ListEntriesRequest extends Message<ListEntriesRequest> {
  /**
   * @generated from field: int32 page_size = 1;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListEntriesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "notebook.v1.ListEntriesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEntriesRequest {
    return new ListEntriesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEntriesRequest {
    return new ListEntriesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEntriesRequest {
    return new ListEntriesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListEntriesRequest | PlainMessage<ListEntriesRequest> | undefined, b: ListEntriesRequest | PlainMessage<ListEntriesRequest> | undefined): boolean {
    return proto3.util.equals(ListEntriesRequest, a, b);
  }
}

/**
 * @generated from message notebook.v1.ListEntriesResponse
 */
export class ListEntriesResponse extends Message<ListEntriesResponse> {
  /**
   * @generated from field: repeated notebook.v1.Entry entries = 1;
   */
  entries: Entry[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  /**
   * @generated from field: int32 total_size = 3;
   */
  totalSize = 0;

  /**
   * @generated from field: bool has_next_page = 4;
   */
  hasNextPage = false;

  constructor(data?: PartialMessage<ListEntriesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "notebook.v1.ListEntriesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entries", kind: "message", T: Entry, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "total_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "has_next_page", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEntriesResponse {
    return new ListEntriesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEntriesResponse {
    return new ListEntriesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEntriesResponse {
    return new ListEntriesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListEntriesResponse | PlainMessage<ListEntriesResponse> | undefined, b: ListEntriesResponse | PlainMessage<ListEntriesResponse> | undefined): boolean {
    return proto3.util.equals(ListEntriesResponse, a, b);
  }
}

/**
 * @generated from message notebook.v1.DeleteEntryRequest
 */
export class DeleteEntryRequest extends Message<DeleteEntryRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteEntryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "notebook.v1.DeleteEntryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteEntryRequest {
    return new DeleteEntryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteEntryRequest {
    return new DeleteEntryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteEntryRequest {
    return new DeleteEntryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteEntryRequest | PlainMessage<DeleteEntryRequest> | undefined, b: DeleteEntryRequest | PlainMessage<DeleteEntryRequest> | undefined): boolean {
    return proto3.util.equals(DeleteEntryRequest, a, b);
  }
}

/**
 * @generated from message notebook.v1.DeleteEntryResponse
 */
export class DeleteEntryResponse extends Message<DeleteEntryResponse> {
  /**
   * @generated from field: notebook.v1.Entry entry = 1;
   */
  entry?: Entry;

  constructor(data?: PartialMessage<DeleteEntryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "notebook.v1.DeleteEntryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entry", kind: "message", T: Entry },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteEntryResponse {
    return new DeleteEntryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteEntryResponse {
    return new DeleteEntryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteEntryResponse {
    return new DeleteEntryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteEntryResponse | PlainMessage<DeleteEntryResponse> | undefined, b: DeleteEntryResponse | PlainMessage<DeleteEntryResponse> | undefined): boolean {
    return proto3.util.equals(DeleteEntryResponse, a, b);
  }
}

/**
 * @generated from message notebook.v1.UndeleteEntryRequest
 */
export class UndeleteEntryRequest extends Message<UndeleteEntryRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<UndeleteEntryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "notebook.v1.UndeleteEntryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UndeleteEntryRequest {
    return new UndeleteEntryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UndeleteEntryRequest {
    return new UndeleteEntryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UndeleteEntryRequest {
    return new UndeleteEntryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UndeleteEntryRequest | PlainMessage<UndeleteEntryRequest> | undefined, b: UndeleteEntryRequest | PlainMessage<UndeleteEntryRequest> | undefined): boolean {
    return proto3.util.equals(UndeleteEntryRequest, a, b);
  }
}

/**
 * @generated from message notebook.v1.UndeleteEntryResponse
 */
export class UndeleteEntryResponse extends Message<UndeleteEntryResponse> {
  /**
   * @generated from field: notebook.v1.Entry entry = 1;
   */
  entry?: Entry;

  constructor(data?: PartialMessage<UndeleteEntryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "notebook.v1.UndeleteEntryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entry", kind: "message", T: Entry },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UndeleteEntryResponse {
    return new UndeleteEntryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UndeleteEntryResponse {
    return new UndeleteEntryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UndeleteEntryResponse {
    return new UndeleteEntryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UndeleteEntryResponse | PlainMessage<UndeleteEntryResponse> | undefined, b: UndeleteEntryResponse | PlainMessage<UndeleteEntryResponse> | undefined): boolean {
    return proto3.util.equals(UndeleteEntryResponse, a, b);
  }
}

